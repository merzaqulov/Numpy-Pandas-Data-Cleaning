# -*- coding: utf-8 -*-
"""Data_Cleaning_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1K75PjFYD5CH2xaSUEppiOc3Okf-cWWLE

## This is a project called My_cleaning_project and in this project there are 3 raw datas should be cleared: Tabel_1, Tabel_2 and Tabel_3. In this project of mine, I have cleared all dataes and convert them to SQL during the process.
"""

import pandas as pd
import numpy as np
import sqlite3 as sql

df1 = pd.read_csv("/content/sample_data/data/only_wood_customer_us_1.csv")
df2 = pd.read_csv("/content/sample_data/data/only_wood_customer_us_2.csv", sep=';')
df3 = pd.read_csv("/content/sample_data/data/only_wood_customer_us_3.csv", sep="\t|,")

"""# Step - 1 , `df1`"""

df1.head()    # Input DataFrame

df1.info()

def Gender(x):    # I used this func to correct the data in Gender columin
  x = x.split("_")[-1]
  if x == '1' or x == 'F':
    x = "Female"
  elif x == '0' or x == 'M':
    x = "Male"
  return x

def name(x):  # I used this func to correct the data in Name columin
  try:
    return x[1:-3].title() if ord(x[0]) == 92 else x.title()
  except:
    pass
# name('\Antonetta\""')

df1.Gender = df1.Gender.apply(Gender)     # The Gender column has been corrected.
df1.FirstName = df1.FirstName.apply(name)    # The FirstName column has been corrected.
df1.LastName = df1.LastName.apply(name)     # The LastName column has been corrected.
df1.Email = df1.Email.map(lambda x : x.lower())   # The Email column has been corrected.
df1.City = df1.City.map(lambda x : x.replace('-', ' ').replace('_', ' ').title())   # The City column has been corrected.
df1.Country = df1.Country.map(lambda x : 'USA' if x != "USA" else x)  # The Country column has been corrected.

del df1["UserName"]

df1[df1.FirstName.isnull()]

df1.FirstName.isnull().sum()

df1.info()

"""# Step - 2, `df2`"""

df2.head()    # Input DataFrame

df2.info()

df2.rename({"51" : "Age", "austin" : "City", "1" : "Gender", "Kutch.lorette@gmail.com" : "Email"}, axis=1, inplace=True)
lis = df2["lorette kutch"].to_list()

def name2(fullname):    # I used this func for the column that came with First Name and Last Name
  F_name, L_name = [],[]
  for x in fullname:
    x = x.split("_")[-1]
    x = x.replace('"', " ").replace(chr(92), " ").split()
    F_name.append(x[0].title())
    L_name.append(x[1].title())
  return F_name, L_name
w = name2(lis)

def age(x):   # I used this func to correct the data in Age columin
  re = ""
  for i in x:
    if i.isdigit():
      re += i
  return int(re)
# age("asdasd323")

def email(x):  # I used this func to correct the data in Email columin
  re = ""
  try:
    x = x.split("_")[1:]
    if len(x) > 1: re += x[0] + "_" + x[1]
    else: re += x[0]
  except:
    pass
  return re.lower()
# email(np.nan)

df2["FirstName"] = w[0]
df2["LastName"] = w[1]
del df2["lorette kutch"]

df2["Gender"] = df2['Gender'].apply(Gender)   # The Gender column has been corrected.
df2.City = df2.City.map(lambda x : x.replace('-', ' ').replace('_', ' ').title())   # The City column has been corrected.
df2.Age  = df2.Age.apply(age)   # The Age column has been corrected
df2["Country"] = df2.City.map(lambda x : "USA" if x != None else "")    # The Country column has been corrected.

df2.Email = df2.Email.apply(email)   # The Email column has been corrected.

df2.head()     # Output DataFrame

df2.info()

"""# Step - 3, df3"""

df3.head()    # Input DataFrame

df3.info()

def city(x):    # I used this func to correct the data in City columin
  re = ''
  x = x.split("_")[1:]
  for i in x:
    re += " " + i
  return re.strip().replace("-", " ").title()
# city("string_sAN-jOSE")

names = df3.Name.to_list()
both = name2(names)
df3["FirstName"] = both[0]
df3["LastName"] = both[1]
del df3["Name"]

df3["Country"] = df3.City.map(lambda x : "USA" if x != None else "")    # The Country column has been corrected.
df3.Gender	 = df3.Gender.apply(Gender)   # The Gender column has been corrected.
df3.City = df3.City.apply(city)    # The City column has been corrected.
df3.dropna(inplace=True)      # In this is the NaN values ​​are cleared
df3.Email = df3.Email.apply(email)    # The Email column has been corrected.
df3.Age = df3.Age.apply(age)      # The Age column has been corrected.

df3.head()    # Output DataFrame

df3.info()

"""# The end"""

all_df = pd.concat([df1,df2,df3])
data = all_df.dropna()

data

data.info() #data is ready

def df_to_sql(df):
    sql_data = sql.connect("data_ready.db")
    return df.to_sql(name="customers", con=sql_data, if_exists="replace")

df_to_sql(data)

